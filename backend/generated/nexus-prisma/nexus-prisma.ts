/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Slot: SlotObject
      Essay: EssayObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      SlotConnection: SlotConnectionObject
      SlotEdge: SlotEdgeObject
      AggregateSlot: AggregateSlotObject
      EssayConnection: EssayConnectionObject
      EssayEdge: EssayEdgeObject
      AggregateEssay: AggregateEssayObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      SlotSubscriptionPayload: SlotSubscriptionPayloadObject
      SlotPreviousValues: SlotPreviousValuesObject
      EssaySubscriptionPayload: EssaySubscriptionPayloadObject
      EssayPreviousValues: EssayPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Slot: SlotFieldDetails
      Essay: EssayFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      SlotConnection: SlotConnectionFieldDetails
      SlotEdge: SlotEdgeFieldDetails
      AggregateSlot: AggregateSlotFieldDetails
      EssayConnection: EssayConnectionFieldDetails
      EssayEdge: EssayEdgeFieldDetails
      AggregateEssay: AggregateEssayFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      SlotSubscriptionPayload: SlotSubscriptionPayloadFieldDetails
      SlotPreviousValues: SlotPreviousValuesFieldDetails
      EssaySubscriptionPayload: EssaySubscriptionPayloadFieldDetails
      EssayPreviousValues: EssayPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      SlotWhereInput: SlotWhereInputInputObject
      EssayWhereInput: EssayWhereInputInputObject
      SlotWhereUniqueInput: SlotWhereUniqueInputInputObject
      EssayWhereUniqueInput: EssayWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      SlotCreateOneWithoutRegisteredInput: SlotCreateOneWithoutRegisteredInputInputObject
      SlotCreateWithoutRegisteredInput: SlotCreateWithoutRegisteredInputInputObject
      EssayCreateOneWithoutAuthorInput: EssayCreateOneWithoutAuthorInputInputObject
      EssayCreateWithoutAuthorInput: EssayCreateWithoutAuthorInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      SlotUpdateOneWithoutRegisteredInput: SlotUpdateOneWithoutRegisteredInputInputObject
      SlotUpdateWithoutRegisteredDataInput: SlotUpdateWithoutRegisteredDataInputInputObject
      SlotUpsertWithoutRegisteredInput: SlotUpsertWithoutRegisteredInputInputObject
      EssayUpdateOneWithoutAuthorInput: EssayUpdateOneWithoutAuthorInputInputObject
      EssayUpdateWithoutAuthorDataInput: EssayUpdateWithoutAuthorDataInputInputObject
      EssayUpsertWithoutAuthorInput: EssayUpsertWithoutAuthorInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      SlotCreateInput: SlotCreateInputInputObject
      UserCreateManyWithoutSlotInput: UserCreateManyWithoutSlotInputInputObject
      UserCreateWithoutSlotInput: UserCreateWithoutSlotInputInputObject
      SlotUpdateInput: SlotUpdateInputInputObject
      UserUpdateManyWithoutSlotInput: UserUpdateManyWithoutSlotInputInputObject
      UserUpdateWithWhereUniqueWithoutSlotInput: UserUpdateWithWhereUniqueWithoutSlotInputInputObject
      UserUpdateWithoutSlotDataInput: UserUpdateWithoutSlotDataInputInputObject
      UserUpsertWithWhereUniqueWithoutSlotInput: UserUpsertWithWhereUniqueWithoutSlotInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      SlotUpdateManyMutationInput: SlotUpdateManyMutationInputInputObject
      EssayCreateInput: EssayCreateInputInputObject
      UserCreateOneWithoutEssayInput: UserCreateOneWithoutEssayInputInputObject
      UserCreateWithoutEssayInput: UserCreateWithoutEssayInputInputObject
      EssayUpdateInput: EssayUpdateInputInputObject
      UserUpdateOneRequiredWithoutEssayInput: UserUpdateOneRequiredWithoutEssayInputInputObject
      UserUpdateWithoutEssayDataInput: UserUpdateWithoutEssayDataInputInputObject
      UserUpsertWithoutEssayInput: UserUpsertWithoutEssayInputInputObject
      EssayUpdateManyMutationInput: EssayUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      SlotSubscriptionWhereInput: SlotSubscriptionWhereInputInputObject
      EssaySubscriptionWhereInput: EssaySubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    UserOrderByInput: UserOrderByInputValues,
    SlotOrderByInput: SlotOrderByInputValues,
    EssayOrderByInput: EssayOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'slot', args?: QuerySlotArgs[] | false, alias?: string  } 
  | { name: 'slots', args?: QuerySlotsArgs[] | false, alias?: string  } 
  | { name: 'slotsConnection', args?: QuerySlotsConnectionArgs[] | false, alias?: string  } 
  | { name: 'essay', args?: QueryEssayArgs[] | false, alias?: string  } 
  | { name: 'essays', args?: QueryEssaysArgs[] | false, alias?: string  } 
  | { name: 'essaysConnection', args?: QueryEssaysConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'slot'
  | 'slots'
  | 'slotsConnection'
  | 'essay'
  | 'essays'
  | 'essaysConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySlotArgs =
  | 'where'
type QuerySlotsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySlotsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEssayArgs =
  | 'where'
type QueryEssaysArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEssaysConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  slot: {
    type: 'Slot'
    args: Record<QuerySlotArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SlotWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Slot | null> | prisma.Slot | null
  }
  slots: {
    type: 'Slot'
    args: Record<QuerySlotsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SlotWhereInput | null, orderBy?: prisma.SlotOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Slot[]> | prisma.Slot[]
  }
  slotsConnection: {
    type: 'SlotConnection'
    args: Record<QuerySlotsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SlotWhereInput | null, orderBy?: prisma.SlotOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SlotConnection> | prisma.SlotConnection
  }
  essay: {
    type: 'Essay'
    args: Record<QueryEssayArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EssayWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Essay | null> | prisma.Essay | null
  }
  essays: {
    type: 'Essay'
    args: Record<QueryEssaysArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EssayWhereInput | null, orderBy?: prisma.EssayOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Essay[]> | prisma.Essay[]
  }
  essaysConnection: {
    type: 'EssayConnection'
    args: Record<QueryEssaysConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EssayWhereInput | null, orderBy?: prisma.EssayOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EssayConnection> | prisma.EssayConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'upstream_id', args?: [] | false, alias?: string  } 
  | { name: 'first_name', args?: [] | false, alias?: string  } 
  | { name: 'last_name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'administrator', args?: [] | false, alias?: string  } 
  | { name: 'slot', args?: [] | false, alias?: string  } 
  | { name: 'essay', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'upstream_id'
  | 'first_name'
  | 'last_name'
  | 'email'
  | 'administrator'
  | 'slot'
  | 'essay'



  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  upstream_id: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  first_name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  last_name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  administrator: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  slot: {
    type: 'Slot'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Slot | null> | prisma.Slot | null
  }
  essay: {
    type: 'Essay'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Essay | null> | prisma.Essay | null
  }
}
  

// Types for Slot

type SlotObject =
  | SlotFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'capacity', args?: [] | false, alias?: string  } 
  | { name: 'registered', args?: SlotRegisteredArgs[] | false, alias?: string  } 
  | { name: 'registered_count', args?: [] | false, alias?: string  } 
  | { name: 'starts_at', args?: [] | false, alias?: string  } 
  | { name: 'ends_at', args?: [] | false, alias?: string  } 

type SlotFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'capacity'
  | 'registered'
  | 'registered_count'
  | 'starts_at'
  | 'ends_at'


type SlotRegisteredArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface SlotFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  capacity: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  registered: {
    type: 'User'
    args: Record<SlotRegisteredArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Slot">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  registered_count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  starts_at: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  ends_at: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Essay

type EssayObject =
  | EssayFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 

type EssayFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'text'
  | 'author'



  

export interface EssayFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Essay">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SlotConnection

type SlotConnectionObject =
  | SlotConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SlotConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SlotConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SlotConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SlotEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SlotConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SlotEdge[]> | prisma.SlotEdge[]
  }
  aggregate: {
    type: 'AggregateSlot'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SlotConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSlot> | prisma.AggregateSlot
  }
}
  

// Types for SlotEdge

type SlotEdgeObject =
  | SlotEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SlotEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SlotEdgeFieldDetails {
  node: {
    type: 'Slot'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SlotEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Slot> | prisma.Slot
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSlot

type AggregateSlotObject =
  | AggregateSlotFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSlotFields =
  | 'count'



  

export interface AggregateSlotFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EssayConnection

type EssayConnectionObject =
  | EssayConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EssayConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EssayConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EssayConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EssayEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EssayConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EssayEdge[]> | prisma.EssayEdge[]
  }
  aggregate: {
    type: 'AggregateEssay'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EssayConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEssay> | prisma.AggregateEssay
  }
}
  

// Types for EssayEdge

type EssayEdgeObject =
  | EssayEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EssayEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EssayEdgeFieldDetails {
  node: {
    type: 'Essay'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EssayEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Essay> | prisma.Essay
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEssay

type AggregateEssayObject =
  | AggregateEssayFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEssayFields =
  | 'count'



  

export interface AggregateEssayFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createSlot', args?: MutationCreateSlotArgs[] | false, alias?: string  } 
  | { name: 'updateSlot', args?: MutationUpdateSlotArgs[] | false, alias?: string  } 
  | { name: 'updateManySlots', args?: MutationUpdateManySlotsArgs[] | false, alias?: string  } 
  | { name: 'upsertSlot', args?: MutationUpsertSlotArgs[] | false, alias?: string  } 
  | { name: 'deleteSlot', args?: MutationDeleteSlotArgs[] | false, alias?: string  } 
  | { name: 'deleteManySlots', args?: MutationDeleteManySlotsArgs[] | false, alias?: string  } 
  | { name: 'createEssay', args?: MutationCreateEssayArgs[] | false, alias?: string  } 
  | { name: 'updateEssay', args?: MutationUpdateEssayArgs[] | false, alias?: string  } 
  | { name: 'updateManyEssays', args?: MutationUpdateManyEssaysArgs[] | false, alias?: string  } 
  | { name: 'upsertEssay', args?: MutationUpsertEssayArgs[] | false, alias?: string  } 
  | { name: 'deleteEssay', args?: MutationDeleteEssayArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEssays', args?: MutationDeleteManyEssaysArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createSlot'
  | 'updateSlot'
  | 'updateManySlots'
  | 'upsertSlot'
  | 'deleteSlot'
  | 'deleteManySlots'
  | 'createEssay'
  | 'updateEssay'
  | 'updateManyEssays'
  | 'upsertEssay'
  | 'deleteEssay'
  | 'deleteManyEssays'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateSlotArgs =
  | 'data'
type MutationUpdateSlotArgs =
  | 'data'
  | 'where'
type MutationUpdateManySlotsArgs =
  | 'data'
  | 'where'
type MutationUpsertSlotArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSlotArgs =
  | 'where'
type MutationDeleteManySlotsArgs =
  | 'where'
type MutationCreateEssayArgs =
  | 'data'
type MutationUpdateEssayArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEssaysArgs =
  | 'data'
  | 'where'
type MutationUpsertEssayArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEssayArgs =
  | 'where'
type MutationDeleteManyEssaysArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSlot: {
    type: 'Slot'
    args: Record<MutationCreateSlotArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SlotCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Slot> | prisma.Slot
  }
  updateSlot: {
    type: 'Slot'
    args: Record<MutationUpdateSlotArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SlotUpdateInput, where: SlotWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Slot | null> | prisma.Slot | null
  }
  updateManySlots: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySlotsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SlotUpdateManyMutationInput, where?: SlotWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSlot: {
    type: 'Slot'
    args: Record<MutationUpsertSlotArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SlotWhereUniqueInput, create: SlotCreateInput, update: SlotUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Slot> | prisma.Slot
  }
  deleteSlot: {
    type: 'Slot'
    args: Record<MutationDeleteSlotArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SlotWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Slot | null> | prisma.Slot | null
  }
  deleteManySlots: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySlotsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SlotWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEssay: {
    type: 'Essay'
    args: Record<MutationCreateEssayArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EssayCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Essay> | prisma.Essay
  }
  updateEssay: {
    type: 'Essay'
    args: Record<MutationUpdateEssayArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EssayUpdateInput, where: EssayWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Essay | null> | prisma.Essay | null
  }
  updateManyEssays: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEssaysArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EssayUpdateManyMutationInput, where?: EssayWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEssay: {
    type: 'Essay'
    args: Record<MutationUpsertEssayArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EssayWhereUniqueInput, create: EssayCreateInput, update: EssayUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Essay> | prisma.Essay
  }
  deleteEssay: {
    type: 'Essay'
    args: Record<MutationDeleteEssayArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EssayWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Essay | null> | prisma.Essay | null
  }
  deleteManyEssays: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEssaysArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EssayWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'slot', args?: SubscriptionSlotArgs[] | false, alias?: string  } 
  | { name: 'essay', args?: SubscriptionEssayArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'slot'
  | 'essay'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionSlotArgs =
  | 'where'
type SubscriptionEssayArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  slot: {
    type: 'SlotSubscriptionPayload'
    args: Record<SubscriptionSlotArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SlotSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SlotSubscriptionPayload | null> | prisma.SlotSubscriptionPayload | null
  }
  essay: {
    type: 'EssaySubscriptionPayload'
    args: Record<SubscriptionEssayArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EssaySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EssaySubscriptionPayload | null> | prisma.EssaySubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'upstream_id', args?: [] | false, alias?: string  } 
  | { name: 'first_name', args?: [] | false, alias?: string  } 
  | { name: 'last_name', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'administrator', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'upstream_id'
  | 'first_name'
  | 'last_name'
  | 'email'
  | 'administrator'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  upstream_id: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  first_name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  last_name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  administrator: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SlotSubscriptionPayload

type SlotSubscriptionPayloadObject =
  | SlotSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SlotSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SlotSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SlotSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Slot'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SlotSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Slot | null> | prisma.Slot | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SlotPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SlotSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SlotPreviousValues | null> | prisma.SlotPreviousValues | null
  }
}
  

// Types for SlotPreviousValues

type SlotPreviousValuesObject =
  | SlotPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'capacity', args?: [] | false, alias?: string  } 
  | { name: 'registered_count', args?: [] | false, alias?: string  } 
  | { name: 'starts_at', args?: [] | false, alias?: string  } 
  | { name: 'ends_at', args?: [] | false, alias?: string  } 

type SlotPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'capacity'
  | 'registered_count'
  | 'starts_at'
  | 'ends_at'



  

export interface SlotPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  capacity: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  registered_count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  starts_at: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  ends_at: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EssaySubscriptionPayload

type EssaySubscriptionPayloadObject =
  | EssaySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EssaySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EssaySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EssaySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Essay'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EssaySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Essay | null> | prisma.Essay | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EssayPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EssaySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EssayPreviousValues | null> | prisma.EssayPreviousValues | null
  }
}
  

// Types for EssayPreviousValues

type EssayPreviousValuesObject =
  | EssayPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 

type EssayPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'text'



  

export interface EssayPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  upstream_id?: number | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'upstream_id', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  upstream_id?: number | null
  upstream_id_not?: number | null
  upstream_id_in?: number[]
  upstream_id_not_in?: number[]
  upstream_id_lt?: number | null
  upstream_id_lte?: number | null
  upstream_id_gt?: number | null
  upstream_id_gte?: number | null
  first_name?: string | null
  first_name_not?: string | null
  first_name_in?: string[]
  first_name_not_in?: string[]
  first_name_lt?: string | null
  first_name_lte?: string | null
  first_name_gt?: string | null
  first_name_gte?: string | null
  first_name_contains?: string | null
  first_name_not_contains?: string | null
  first_name_starts_with?: string | null
  first_name_not_starts_with?: string | null
  first_name_ends_with?: string | null
  first_name_not_ends_with?: string | null
  last_name?: string | null
  last_name_not?: string | null
  last_name_in?: string[]
  last_name_not_in?: string[]
  last_name_lt?: string | null
  last_name_lte?: string | null
  last_name_gt?: string | null
  last_name_gte?: string | null
  last_name_contains?: string | null
  last_name_not_contains?: string | null
  last_name_starts_with?: string | null
  last_name_not_starts_with?: string | null
  last_name_ends_with?: string | null
  last_name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  administrator?: boolean | null
  administrator_not?: boolean | null
  slot?: SlotWhereInput | null
  essay?: EssayWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'upstream_id', alias?: string  } 
  | { name: 'upstream_id_not', alias?: string  } 
  | { name: 'upstream_id_in', alias?: string  } 
  | { name: 'upstream_id_not_in', alias?: string  } 
  | { name: 'upstream_id_lt', alias?: string  } 
  | { name: 'upstream_id_lte', alias?: string  } 
  | { name: 'upstream_id_gt', alias?: string  } 
  | { name: 'upstream_id_gte', alias?: string  } 
  | { name: 'first_name', alias?: string  } 
  | { name: 'first_name_not', alias?: string  } 
  | { name: 'first_name_in', alias?: string  } 
  | { name: 'first_name_not_in', alias?: string  } 
  | { name: 'first_name_lt', alias?: string  } 
  | { name: 'first_name_lte', alias?: string  } 
  | { name: 'first_name_gt', alias?: string  } 
  | { name: 'first_name_gte', alias?: string  } 
  | { name: 'first_name_contains', alias?: string  } 
  | { name: 'first_name_not_contains', alias?: string  } 
  | { name: 'first_name_starts_with', alias?: string  } 
  | { name: 'first_name_not_starts_with', alias?: string  } 
  | { name: 'first_name_ends_with', alias?: string  } 
  | { name: 'first_name_not_ends_with', alias?: string  } 
  | { name: 'last_name', alias?: string  } 
  | { name: 'last_name_not', alias?: string  } 
  | { name: 'last_name_in', alias?: string  } 
  | { name: 'last_name_not_in', alias?: string  } 
  | { name: 'last_name_lt', alias?: string  } 
  | { name: 'last_name_lte', alias?: string  } 
  | { name: 'last_name_gt', alias?: string  } 
  | { name: 'last_name_gte', alias?: string  } 
  | { name: 'last_name_contains', alias?: string  } 
  | { name: 'last_name_not_contains', alias?: string  } 
  | { name: 'last_name_starts_with', alias?: string  } 
  | { name: 'last_name_not_starts_with', alias?: string  } 
  | { name: 'last_name_ends_with', alias?: string  } 
  | { name: 'last_name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'administrator', alias?: string  } 
  | { name: 'administrator_not', alias?: string  } 
  | { name: 'slot', alias?: string  } 
  | { name: 'essay', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SlotWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  capacity?: number | null
  capacity_not?: number | null
  capacity_in?: number[]
  capacity_not_in?: number[]
  capacity_lt?: number | null
  capacity_lte?: number | null
  capacity_gt?: number | null
  capacity_gte?: number | null
  registered_every?: UserWhereInput | null
  registered_some?: UserWhereInput | null
  registered_none?: UserWhereInput | null
  registered_count?: number | null
  registered_count_not?: number | null
  registered_count_in?: number[]
  registered_count_not_in?: number[]
  registered_count_lt?: number | null
  registered_count_lte?: number | null
  registered_count_gt?: number | null
  registered_count_gte?: number | null
  starts_at?: string | null
  starts_at_not?: string | null
  starts_at_in?: string[]
  starts_at_not_in?: string[]
  starts_at_lt?: string | null
  starts_at_lte?: string | null
  starts_at_gt?: string | null
  starts_at_gte?: string | null
  ends_at?: string | null
  ends_at_not?: string | null
  ends_at_in?: string[]
  ends_at_not_in?: string[]
  ends_at_lt?: string | null
  ends_at_lte?: string | null
  ends_at_gt?: string | null
  ends_at_gte?: string | null
  AND?: SlotWhereInput[]
  OR?: SlotWhereInput[]
  NOT?: SlotWhereInput[]
}
export type SlotWhereInputInputObject =
  | Extract<keyof SlotWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'capacity', alias?: string  } 
  | { name: 'capacity_not', alias?: string  } 
  | { name: 'capacity_in', alias?: string  } 
  | { name: 'capacity_not_in', alias?: string  } 
  | { name: 'capacity_lt', alias?: string  } 
  | { name: 'capacity_lte', alias?: string  } 
  | { name: 'capacity_gt', alias?: string  } 
  | { name: 'capacity_gte', alias?: string  } 
  | { name: 'registered_every', alias?: string  } 
  | { name: 'registered_some', alias?: string  } 
  | { name: 'registered_none', alias?: string  } 
  | { name: 'registered_count', alias?: string  } 
  | { name: 'registered_count_not', alias?: string  } 
  | { name: 'registered_count_in', alias?: string  } 
  | { name: 'registered_count_not_in', alias?: string  } 
  | { name: 'registered_count_lt', alias?: string  } 
  | { name: 'registered_count_lte', alias?: string  } 
  | { name: 'registered_count_gt', alias?: string  } 
  | { name: 'registered_count_gte', alias?: string  } 
  | { name: 'starts_at', alias?: string  } 
  | { name: 'starts_at_not', alias?: string  } 
  | { name: 'starts_at_in', alias?: string  } 
  | { name: 'starts_at_not_in', alias?: string  } 
  | { name: 'starts_at_lt', alias?: string  } 
  | { name: 'starts_at_lte', alias?: string  } 
  | { name: 'starts_at_gt', alias?: string  } 
  | { name: 'starts_at_gte', alias?: string  } 
  | { name: 'ends_at', alias?: string  } 
  | { name: 'ends_at_not', alias?: string  } 
  | { name: 'ends_at_in', alias?: string  } 
  | { name: 'ends_at_not_in', alias?: string  } 
  | { name: 'ends_at_lt', alias?: string  } 
  | { name: 'ends_at_lte', alias?: string  } 
  | { name: 'ends_at_gt', alias?: string  } 
  | { name: 'ends_at_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EssayWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  text?: string | null
  text_not?: string | null
  text_in?: string[]
  text_not_in?: string[]
  text_lt?: string | null
  text_lte?: string | null
  text_gt?: string | null
  text_gte?: string | null
  text_contains?: string | null
  text_not_contains?: string | null
  text_starts_with?: string | null
  text_not_starts_with?: string | null
  text_ends_with?: string | null
  text_not_ends_with?: string | null
  author?: UserWhereInput | null
  AND?: EssayWhereInput[]
  OR?: EssayWhereInput[]
  NOT?: EssayWhereInput[]
}
export type EssayWhereInputInputObject =
  | Extract<keyof EssayWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'text_not', alias?: string  } 
  | { name: 'text_in', alias?: string  } 
  | { name: 'text_not_in', alias?: string  } 
  | { name: 'text_lt', alias?: string  } 
  | { name: 'text_lte', alias?: string  } 
  | { name: 'text_gt', alias?: string  } 
  | { name: 'text_gte', alias?: string  } 
  | { name: 'text_contains', alias?: string  } 
  | { name: 'text_not_contains', alias?: string  } 
  | { name: 'text_starts_with', alias?: string  } 
  | { name: 'text_not_starts_with', alias?: string  } 
  | { name: 'text_ends_with', alias?: string  } 
  | { name: 'text_not_ends_with', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SlotWhereUniqueInput {
  id?: string | null
}
export type SlotWhereUniqueInputInputObject =
  | Extract<keyof SlotWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EssayWhereUniqueInput {
  id?: string | null
}
export type EssayWhereUniqueInputInputObject =
  | Extract<keyof EssayWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  upstream_id?: number
  first_name?: string | null
  last_name?: string | null
  email?: string
  administrator?: boolean
  slot?: SlotCreateOneWithoutRegisteredInput | null
  essay?: EssayCreateOneWithoutAuthorInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'upstream_id', alias?: string  } 
  | { name: 'first_name', alias?: string  } 
  | { name: 'last_name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'administrator', alias?: string  } 
  | { name: 'slot', alias?: string  } 
  | { name: 'essay', alias?: string  } 
  
export interface SlotCreateOneWithoutRegisteredInput {
  create?: SlotCreateWithoutRegisteredInput | null
  connect?: SlotWhereUniqueInput | null
}
export type SlotCreateOneWithoutRegisteredInputInputObject =
  | Extract<keyof SlotCreateOneWithoutRegisteredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SlotCreateWithoutRegisteredInput {
  capacity?: number
  registered_count?: number | null
  starts_at?: string
  ends_at?: string
}
export type SlotCreateWithoutRegisteredInputInputObject =
  | Extract<keyof SlotCreateWithoutRegisteredInput, string>
  | { name: 'capacity', alias?: string  } 
  | { name: 'registered_count', alias?: string  } 
  | { name: 'starts_at', alias?: string  } 
  | { name: 'ends_at', alias?: string  } 
  
export interface EssayCreateOneWithoutAuthorInput {
  create?: EssayCreateWithoutAuthorInput | null
  connect?: EssayWhereUniqueInput | null
}
export type EssayCreateOneWithoutAuthorInputInputObject =
  | Extract<keyof EssayCreateOneWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EssayCreateWithoutAuthorInput {
  text?: string
}
export type EssayCreateWithoutAuthorInputInputObject =
  | Extract<keyof EssayCreateWithoutAuthorInput, string>
  | { name: 'text', alias?: string  } 
  
export interface UserUpdateInput {
  upstream_id?: number | null
  first_name?: string | null
  last_name?: string | null
  email?: string | null
  administrator?: boolean | null
  slot?: SlotUpdateOneWithoutRegisteredInput | null
  essay?: EssayUpdateOneWithoutAuthorInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'upstream_id', alias?: string  } 
  | { name: 'first_name', alias?: string  } 
  | { name: 'last_name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'administrator', alias?: string  } 
  | { name: 'slot', alias?: string  } 
  | { name: 'essay', alias?: string  } 
  
export interface SlotUpdateOneWithoutRegisteredInput {
  create?: SlotCreateWithoutRegisteredInput | null
  update?: SlotUpdateWithoutRegisteredDataInput | null
  upsert?: SlotUpsertWithoutRegisteredInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: SlotWhereUniqueInput | null
}
export type SlotUpdateOneWithoutRegisteredInputInputObject =
  | Extract<keyof SlotUpdateOneWithoutRegisteredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SlotUpdateWithoutRegisteredDataInput {
  capacity?: number | null
  registered_count?: number | null
  starts_at?: string | null
  ends_at?: string | null
}
export type SlotUpdateWithoutRegisteredDataInputInputObject =
  | Extract<keyof SlotUpdateWithoutRegisteredDataInput, string>
  | { name: 'capacity', alias?: string  } 
  | { name: 'registered_count', alias?: string  } 
  | { name: 'starts_at', alias?: string  } 
  | { name: 'ends_at', alias?: string  } 
  
export interface SlotUpsertWithoutRegisteredInput {
  update?: SlotUpdateWithoutRegisteredDataInput
  create?: SlotCreateWithoutRegisteredInput
}
export type SlotUpsertWithoutRegisteredInputInputObject =
  | Extract<keyof SlotUpsertWithoutRegisteredInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EssayUpdateOneWithoutAuthorInput {
  create?: EssayCreateWithoutAuthorInput | null
  update?: EssayUpdateWithoutAuthorDataInput | null
  upsert?: EssayUpsertWithoutAuthorInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: EssayWhereUniqueInput | null
}
export type EssayUpdateOneWithoutAuthorInputInputObject =
  | Extract<keyof EssayUpdateOneWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EssayUpdateWithoutAuthorDataInput {
  text?: string | null
}
export type EssayUpdateWithoutAuthorDataInputInputObject =
  | Extract<keyof EssayUpdateWithoutAuthorDataInput, string>
  | { name: 'text', alias?: string  } 
  
export interface EssayUpsertWithoutAuthorInput {
  update?: EssayUpdateWithoutAuthorDataInput
  create?: EssayCreateWithoutAuthorInput
}
export type EssayUpsertWithoutAuthorInputInputObject =
  | Extract<keyof EssayUpsertWithoutAuthorInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  upstream_id?: number | null
  first_name?: string | null
  last_name?: string | null
  email?: string | null
  administrator?: boolean | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'upstream_id', alias?: string  } 
  | { name: 'first_name', alias?: string  } 
  | { name: 'last_name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'administrator', alias?: string  } 
  
export interface SlotCreateInput {
  capacity?: number
  registered?: UserCreateManyWithoutSlotInput | null
  registered_count?: number | null
  starts_at?: string
  ends_at?: string
}
export type SlotCreateInputInputObject =
  | Extract<keyof SlotCreateInput, string>
  | { name: 'capacity', alias?: string  } 
  | { name: 'registered', alias?: string  } 
  | { name: 'registered_count', alias?: string  } 
  | { name: 'starts_at', alias?: string  } 
  | { name: 'ends_at', alias?: string  } 
  
export interface UserCreateManyWithoutSlotInput {
  create?: UserCreateWithoutSlotInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutSlotInputInputObject =
  | Extract<keyof UserCreateManyWithoutSlotInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutSlotInput {
  upstream_id?: number
  first_name?: string | null
  last_name?: string | null
  email?: string
  administrator?: boolean
  essay?: EssayCreateOneWithoutAuthorInput | null
}
export type UserCreateWithoutSlotInputInputObject =
  | Extract<keyof UserCreateWithoutSlotInput, string>
  | { name: 'upstream_id', alias?: string  } 
  | { name: 'first_name', alias?: string  } 
  | { name: 'last_name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'administrator', alias?: string  } 
  | { name: 'essay', alias?: string  } 
  
export interface SlotUpdateInput {
  capacity?: number | null
  registered?: UserUpdateManyWithoutSlotInput | null
  registered_count?: number | null
  starts_at?: string | null
  ends_at?: string | null
}
export type SlotUpdateInputInputObject =
  | Extract<keyof SlotUpdateInput, string>
  | { name: 'capacity', alias?: string  } 
  | { name: 'registered', alias?: string  } 
  | { name: 'registered_count', alias?: string  } 
  | { name: 'starts_at', alias?: string  } 
  | { name: 'ends_at', alias?: string  } 
  
export interface UserUpdateManyWithoutSlotInput {
  create?: UserCreateWithoutSlotInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutSlotInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutSlotInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutSlotInputInputObject =
  | Extract<keyof UserUpdateManyWithoutSlotInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutSlotInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutSlotDataInput
}
export type UserUpdateWithWhereUniqueWithoutSlotInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutSlotInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutSlotDataInput {
  upstream_id?: number | null
  first_name?: string | null
  last_name?: string | null
  email?: string | null
  administrator?: boolean | null
  essay?: EssayUpdateOneWithoutAuthorInput | null
}
export type UserUpdateWithoutSlotDataInputInputObject =
  | Extract<keyof UserUpdateWithoutSlotDataInput, string>
  | { name: 'upstream_id', alias?: string  } 
  | { name: 'first_name', alias?: string  } 
  | { name: 'last_name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'administrator', alias?: string  } 
  | { name: 'essay', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutSlotInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutSlotDataInput
  create?: UserCreateWithoutSlotInput
}
export type UserUpsertWithWhereUniqueWithoutSlotInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutSlotInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  upstream_id?: number | null
  upstream_id_not?: number | null
  upstream_id_in?: number[]
  upstream_id_not_in?: number[]
  upstream_id_lt?: number | null
  upstream_id_lte?: number | null
  upstream_id_gt?: number | null
  upstream_id_gte?: number | null
  first_name?: string | null
  first_name_not?: string | null
  first_name_in?: string[]
  first_name_not_in?: string[]
  first_name_lt?: string | null
  first_name_lte?: string | null
  first_name_gt?: string | null
  first_name_gte?: string | null
  first_name_contains?: string | null
  first_name_not_contains?: string | null
  first_name_starts_with?: string | null
  first_name_not_starts_with?: string | null
  first_name_ends_with?: string | null
  first_name_not_ends_with?: string | null
  last_name?: string | null
  last_name_not?: string | null
  last_name_in?: string[]
  last_name_not_in?: string[]
  last_name_lt?: string | null
  last_name_lte?: string | null
  last_name_gt?: string | null
  last_name_gte?: string | null
  last_name_contains?: string | null
  last_name_not_contains?: string | null
  last_name_starts_with?: string | null
  last_name_not_starts_with?: string | null
  last_name_ends_with?: string | null
  last_name_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  administrator?: boolean | null
  administrator_not?: boolean | null
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'upstream_id', alias?: string  } 
  | { name: 'upstream_id_not', alias?: string  } 
  | { name: 'upstream_id_in', alias?: string  } 
  | { name: 'upstream_id_not_in', alias?: string  } 
  | { name: 'upstream_id_lt', alias?: string  } 
  | { name: 'upstream_id_lte', alias?: string  } 
  | { name: 'upstream_id_gt', alias?: string  } 
  | { name: 'upstream_id_gte', alias?: string  } 
  | { name: 'first_name', alias?: string  } 
  | { name: 'first_name_not', alias?: string  } 
  | { name: 'first_name_in', alias?: string  } 
  | { name: 'first_name_not_in', alias?: string  } 
  | { name: 'first_name_lt', alias?: string  } 
  | { name: 'first_name_lte', alias?: string  } 
  | { name: 'first_name_gt', alias?: string  } 
  | { name: 'first_name_gte', alias?: string  } 
  | { name: 'first_name_contains', alias?: string  } 
  | { name: 'first_name_not_contains', alias?: string  } 
  | { name: 'first_name_starts_with', alias?: string  } 
  | { name: 'first_name_not_starts_with', alias?: string  } 
  | { name: 'first_name_ends_with', alias?: string  } 
  | { name: 'first_name_not_ends_with', alias?: string  } 
  | { name: 'last_name', alias?: string  } 
  | { name: 'last_name_not', alias?: string  } 
  | { name: 'last_name_in', alias?: string  } 
  | { name: 'last_name_not_in', alias?: string  } 
  | { name: 'last_name_lt', alias?: string  } 
  | { name: 'last_name_lte', alias?: string  } 
  | { name: 'last_name_gt', alias?: string  } 
  | { name: 'last_name_gte', alias?: string  } 
  | { name: 'last_name_contains', alias?: string  } 
  | { name: 'last_name_not_contains', alias?: string  } 
  | { name: 'last_name_starts_with', alias?: string  } 
  | { name: 'last_name_not_starts_with', alias?: string  } 
  | { name: 'last_name_ends_with', alias?: string  } 
  | { name: 'last_name_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'administrator', alias?: string  } 
  | { name: 'administrator_not', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  upstream_id?: number | null
  first_name?: string | null
  last_name?: string | null
  email?: string | null
  administrator?: boolean | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'upstream_id', alias?: string  } 
  | { name: 'first_name', alias?: string  } 
  | { name: 'last_name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'administrator', alias?: string  } 
  
export interface SlotUpdateManyMutationInput {
  capacity?: number | null
  registered_count?: number | null
  starts_at?: string | null
  ends_at?: string | null
}
export type SlotUpdateManyMutationInputInputObject =
  | Extract<keyof SlotUpdateManyMutationInput, string>
  | { name: 'capacity', alias?: string  } 
  | { name: 'registered_count', alias?: string  } 
  | { name: 'starts_at', alias?: string  } 
  | { name: 'ends_at', alias?: string  } 
  
export interface EssayCreateInput {
  text?: string
  author?: UserCreateOneWithoutEssayInput
}
export type EssayCreateInputInputObject =
  | Extract<keyof EssayCreateInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface UserCreateOneWithoutEssayInput {
  create?: UserCreateWithoutEssayInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutEssayInputInputObject =
  | Extract<keyof UserCreateOneWithoutEssayInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutEssayInput {
  upstream_id?: number
  first_name?: string | null
  last_name?: string | null
  email?: string
  administrator?: boolean
  slot?: SlotCreateOneWithoutRegisteredInput | null
}
export type UserCreateWithoutEssayInputInputObject =
  | Extract<keyof UserCreateWithoutEssayInput, string>
  | { name: 'upstream_id', alias?: string  } 
  | { name: 'first_name', alias?: string  } 
  | { name: 'last_name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'administrator', alias?: string  } 
  | { name: 'slot', alias?: string  } 
  
export interface EssayUpdateInput {
  text?: string | null
  author?: UserUpdateOneRequiredWithoutEssayInput | null
}
export type EssayUpdateInputInputObject =
  | Extract<keyof EssayUpdateInput, string>
  | { name: 'text', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutEssayInput {
  create?: UserCreateWithoutEssayInput | null
  update?: UserUpdateWithoutEssayDataInput | null
  upsert?: UserUpsertWithoutEssayInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutEssayInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutEssayInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutEssayDataInput {
  upstream_id?: number | null
  first_name?: string | null
  last_name?: string | null
  email?: string | null
  administrator?: boolean | null
  slot?: SlotUpdateOneWithoutRegisteredInput | null
}
export type UserUpdateWithoutEssayDataInputInputObject =
  | Extract<keyof UserUpdateWithoutEssayDataInput, string>
  | { name: 'upstream_id', alias?: string  } 
  | { name: 'first_name', alias?: string  } 
  | { name: 'last_name', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'administrator', alias?: string  } 
  | { name: 'slot', alias?: string  } 
  
export interface UserUpsertWithoutEssayInput {
  update?: UserUpdateWithoutEssayDataInput
  create?: UserCreateWithoutEssayInput
}
export type UserUpsertWithoutEssayInputInputObject =
  | Extract<keyof UserUpsertWithoutEssayInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EssayUpdateManyMutationInput {
  text?: string | null
}
export type EssayUpdateManyMutationInputInputObject =
  | Extract<keyof EssayUpdateManyMutationInput, string>
  | { name: 'text', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SlotSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SlotWhereInput | null
  AND?: SlotSubscriptionWhereInput[]
  OR?: SlotSubscriptionWhereInput[]
  NOT?: SlotSubscriptionWhereInput[]
}
export type SlotSubscriptionWhereInputInputObject =
  | Extract<keyof SlotSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EssaySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EssayWhereInput | null
  AND?: EssaySubscriptionWhereInput[]
  OR?: EssaySubscriptionWhereInput[]
  NOT?: EssaySubscriptionWhereInput[]
}
export type EssaySubscriptionWhereInputInputObject =
  | Extract<keyof EssaySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'upstream_id_ASC'
  | 'upstream_id_DESC'
  | 'first_name_ASC'
  | 'first_name_DESC'
  | 'last_name_ASC'
  | 'last_name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'administrator_ASC'
  | 'administrator_DESC'
  
export type SlotOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'capacity_ASC'
  | 'capacity_DESC'
  | 'registered_count_ASC'
  | 'registered_count_DESC'
  | 'starts_at_ASC'
  | 'starts_at_DESC'
  | 'ends_at_ASC'
  | 'ends_at_DESC'
  
export type EssayOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'text_ASC'
  | 'text_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  