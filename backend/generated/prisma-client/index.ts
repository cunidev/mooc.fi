// Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  essay: (where?: EssayWhereInput) => Promise<boolean>;
  essayTopic: (where?: EssayTopicWhereInput) => Promise<boolean>;
  slot: (where?: SlotWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  essay: (where: EssayWhereUniqueInput) => EssayPromise;
  essays: (
    args?: {
      where?: EssayWhereInput;
      orderBy?: EssayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Essay>;
  essaysConnection: (
    args?: {
      where?: EssayWhereInput;
      orderBy?: EssayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EssayConnectionPromise;
  essayTopic: (where: EssayTopicWhereUniqueInput) => EssayTopicPromise;
  essayTopics: (
    args?: {
      where?: EssayTopicWhereInput;
      orderBy?: EssayTopicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<EssayTopic>;
  essayTopicsConnection: (
    args?: {
      where?: EssayTopicWhereInput;
      orderBy?: EssayTopicOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EssayTopicConnectionPromise;
  slot: (where: SlotWhereUniqueInput) => SlotPromise;
  slots: (
    args?: {
      where?: SlotWhereInput;
      orderBy?: SlotOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Slot>;
  slotsConnection: (
    args?: {
      where?: SlotWhereInput;
      orderBy?: SlotOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SlotConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEssay: (data: EssayCreateInput) => EssayPromise;
  updateEssay: (
    args: { data: EssayUpdateInput; where: EssayWhereUniqueInput }
  ) => EssayPromise;
  updateManyEssays: (
    args: { data: EssayUpdateManyMutationInput; where?: EssayWhereInput }
  ) => BatchPayloadPromise;
  upsertEssay: (
    args: {
      where: EssayWhereUniqueInput;
      create: EssayCreateInput;
      update: EssayUpdateInput;
    }
  ) => EssayPromise;
  deleteEssay: (where: EssayWhereUniqueInput) => EssayPromise;
  deleteManyEssays: (where?: EssayWhereInput) => BatchPayloadPromise;
  createEssayTopic: (data: EssayTopicCreateInput) => EssayTopicPromise;
  updateEssayTopic: (
    args: { data: EssayTopicUpdateInput; where: EssayTopicWhereUniqueInput }
  ) => EssayTopicPromise;
  updateManyEssayTopics: (
    args: {
      data: EssayTopicUpdateManyMutationInput;
      where?: EssayTopicWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertEssayTopic: (
    args: {
      where: EssayTopicWhereUniqueInput;
      create: EssayTopicCreateInput;
      update: EssayTopicUpdateInput;
    }
  ) => EssayTopicPromise;
  deleteEssayTopic: (where: EssayTopicWhereUniqueInput) => EssayTopicPromise;
  deleteManyEssayTopics: (where?: EssayTopicWhereInput) => BatchPayloadPromise;
  createSlot: (data: SlotCreateInput) => SlotPromise;
  updateSlot: (
    args: { data: SlotUpdateInput; where: SlotWhereUniqueInput }
  ) => SlotPromise;
  updateManySlots: (
    args: { data: SlotUpdateManyMutationInput; where?: SlotWhereInput }
  ) => BatchPayloadPromise;
  upsertSlot: (
    args: {
      where: SlotWhereUniqueInput;
      create: SlotCreateInput;
      update: SlotUpdateInput;
    }
  ) => SlotPromise;
  deleteSlot: (where: SlotWhereUniqueInput) => SlotPromise;
  deleteManySlots: (where?: SlotWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  essay: (
    where?: EssaySubscriptionWhereInput
  ) => EssaySubscriptionPayloadSubscription;
  essayTopic: (
    where?: EssayTopicSubscriptionWhereInput
  ) => EssayTopicSubscriptionPayloadSubscription;
  slot: (
    where?: SlotSubscriptionWhereInput
  ) => SlotSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "upstream_id_ASC"
  | "upstream_id_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "administrator_ASC"
  | "administrator_DESC";

export type EssayOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "text_ASC"
  | "text_DESC";

export type EssayTopicOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "min_words_ASC"
  | "min_words_DESC"
  | "max_words_ASC"
  | "max_words_DESC";

export type SlotOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "capacity_ASC"
  | "capacity_DESC"
  | "registered_count_ASC"
  | "registered_count_DESC"
  | "starts_at_ASC"
  | "starts_at_DESC"
  | "ends_at_ASC"
  | "ends_at_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type EssayWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  upstream_id?: Int;
  upstream_id_not?: Int;
  upstream_id_in?: Int[] | Int;
  upstream_id_not_in?: Int[] | Int;
  upstream_id_lt?: Int;
  upstream_id_lte?: Int;
  upstream_id_gt?: Int;
  upstream_id_gte?: Int;
  first_name?: String;
  first_name_not?: String;
  first_name_in?: String[] | String;
  first_name_not_in?: String[] | String;
  first_name_lt?: String;
  first_name_lte?: String;
  first_name_gt?: String;
  first_name_gte?: String;
  first_name_contains?: String;
  first_name_not_contains?: String;
  first_name_starts_with?: String;
  first_name_not_starts_with?: String;
  first_name_ends_with?: String;
  first_name_not_ends_with?: String;
  last_name?: String;
  last_name_not?: String;
  last_name_in?: String[] | String;
  last_name_not_in?: String[] | String;
  last_name_lt?: String;
  last_name_lte?: String;
  last_name_gt?: String;
  last_name_gte?: String;
  last_name_contains?: String;
  last_name_not_contains?: String;
  last_name_starts_with?: String;
  last_name_not_starts_with?: String;
  last_name_ends_with?: String;
  last_name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  administrator?: Boolean;
  administrator_not?: Boolean;
  slot?: SlotWhereInput;
  essays_every?: EssayWhereInput;
  essays_some?: EssayWhereInput;
  essays_none?: EssayWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface SlotWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  capacity?: Int;
  capacity_not?: Int;
  capacity_in?: Int[] | Int;
  capacity_not_in?: Int[] | Int;
  capacity_lt?: Int;
  capacity_lte?: Int;
  capacity_gt?: Int;
  capacity_gte?: Int;
  registered_every?: UserWhereInput;
  registered_some?: UserWhereInput;
  registered_none?: UserWhereInput;
  registered_count?: Int;
  registered_count_not?: Int;
  registered_count_in?: Int[] | Int;
  registered_count_not_in?: Int[] | Int;
  registered_count_lt?: Int;
  registered_count_lte?: Int;
  registered_count_gt?: Int;
  registered_count_gte?: Int;
  starts_at?: DateTimeInput;
  starts_at_not?: DateTimeInput;
  starts_at_in?: DateTimeInput[] | DateTimeInput;
  starts_at_not_in?: DateTimeInput[] | DateTimeInput;
  starts_at_lt?: DateTimeInput;
  starts_at_lte?: DateTimeInput;
  starts_at_gt?: DateTimeInput;
  starts_at_gte?: DateTimeInput;
  ends_at?: DateTimeInput;
  ends_at_not?: DateTimeInput;
  ends_at_in?: DateTimeInput[] | DateTimeInput;
  ends_at_not_in?: DateTimeInput[] | DateTimeInput;
  ends_at_lt?: DateTimeInput;
  ends_at_lte?: DateTimeInput;
  ends_at_gt?: DateTimeInput;
  ends_at_gte?: DateTimeInput;
  AND?: SlotWhereInput[] | SlotWhereInput;
  OR?: SlotWhereInput[] | SlotWhereInput;
  NOT?: SlotWhereInput[] | SlotWhereInput;
}

export interface EssayWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  author?: UserWhereInput;
  topic?: EssayTopicWhereInput;
  AND?: EssayWhereInput[] | EssayWhereInput;
  OR?: EssayWhereInput[] | EssayWhereInput;
  NOT?: EssayWhereInput[] | EssayWhereInput;
}

export interface EssayTopicWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  min_words?: Int;
  min_words_not?: Int;
  min_words_in?: Int[] | Int;
  min_words_not_in?: Int[] | Int;
  min_words_lt?: Int;
  min_words_lte?: Int;
  min_words_gt?: Int;
  min_words_gte?: Int;
  max_words?: Int;
  max_words_not?: Int;
  max_words_in?: Int[] | Int;
  max_words_not_in?: Int[] | Int;
  max_words_lt?: Int;
  max_words_lte?: Int;
  max_words_gt?: Int;
  max_words_gte?: Int;
  AND?: EssayTopicWhereInput[] | EssayTopicWhereInput;
  OR?: EssayTopicWhereInput[] | EssayTopicWhereInput;
  NOT?: EssayTopicWhereInput[] | EssayTopicWhereInput;
}

export type EssayTopicWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type SlotWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  upstream_id?: Int;
}>;

export interface EssayCreateInput {
  text: String;
  author: UserCreateOneWithoutEssaysInput;
  topic: EssayTopicCreateOneInput;
}

export interface UserCreateOneWithoutEssaysInput {
  create?: UserCreateWithoutEssaysInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutEssaysInput {
  upstream_id: Int;
  first_name?: String;
  last_name?: String;
  email: String;
  administrator: Boolean;
  slot?: SlotCreateOneWithoutRegisteredInput;
}

export interface SlotCreateOneWithoutRegisteredInput {
  create?: SlotCreateWithoutRegisteredInput;
  connect?: SlotWhereUniqueInput;
}

export interface SlotCreateWithoutRegisteredInput {
  capacity: Int;
  registered_count?: Int;
  starts_at: DateTimeInput;
  ends_at: DateTimeInput;
}

export interface EssayTopicCreateOneInput {
  create?: EssayTopicCreateInput;
  connect?: EssayTopicWhereUniqueInput;
}

export interface EssayTopicCreateInput {
  title: String;
  description: String;
  min_words: Int;
  max_words: Int;
}

export interface EssayUpdateInput {
  text?: String;
  author?: UserUpdateOneRequiredWithoutEssaysInput;
  topic?: EssayTopicUpdateOneRequiredInput;
}

export interface UserUpdateOneRequiredWithoutEssaysInput {
  create?: UserCreateWithoutEssaysInput;
  update?: UserUpdateWithoutEssaysDataInput;
  upsert?: UserUpsertWithoutEssaysInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutEssaysDataInput {
  upstream_id?: Int;
  first_name?: String;
  last_name?: String;
  email?: String;
  administrator?: Boolean;
  slot?: SlotUpdateOneWithoutRegisteredInput;
}

export interface SlotUpdateOneWithoutRegisteredInput {
  create?: SlotCreateWithoutRegisteredInput;
  update?: SlotUpdateWithoutRegisteredDataInput;
  upsert?: SlotUpsertWithoutRegisteredInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: SlotWhereUniqueInput;
}

export interface SlotUpdateWithoutRegisteredDataInput {
  capacity?: Int;
  registered_count?: Int;
  starts_at?: DateTimeInput;
  ends_at?: DateTimeInput;
}

export interface SlotUpsertWithoutRegisteredInput {
  update: SlotUpdateWithoutRegisteredDataInput;
  create: SlotCreateWithoutRegisteredInput;
}

export interface UserUpsertWithoutEssaysInput {
  update: UserUpdateWithoutEssaysDataInput;
  create: UserCreateWithoutEssaysInput;
}

export interface EssayTopicUpdateOneRequiredInput {
  create?: EssayTopicCreateInput;
  update?: EssayTopicUpdateDataInput;
  upsert?: EssayTopicUpsertNestedInput;
  connect?: EssayTopicWhereUniqueInput;
}

export interface EssayTopicUpdateDataInput {
  title?: String;
  description?: String;
  min_words?: Int;
  max_words?: Int;
}

export interface EssayTopicUpsertNestedInput {
  update: EssayTopicUpdateDataInput;
  create: EssayTopicCreateInput;
}

export interface EssayUpdateManyMutationInput {
  text?: String;
}

export interface EssayTopicUpdateInput {
  title?: String;
  description?: String;
  min_words?: Int;
  max_words?: Int;
}

export interface EssayTopicUpdateManyMutationInput {
  title?: String;
  description?: String;
  min_words?: Int;
  max_words?: Int;
}

export interface SlotCreateInput {
  capacity: Int;
  registered?: UserCreateManyWithoutSlotInput;
  registered_count?: Int;
  starts_at: DateTimeInput;
  ends_at: DateTimeInput;
}

export interface UserCreateManyWithoutSlotInput {
  create?: UserCreateWithoutSlotInput[] | UserCreateWithoutSlotInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutSlotInput {
  upstream_id: Int;
  first_name?: String;
  last_name?: String;
  email: String;
  administrator: Boolean;
  essays?: EssayCreateManyWithoutAuthorInput;
}

export interface EssayCreateManyWithoutAuthorInput {
  create?: EssayCreateWithoutAuthorInput[] | EssayCreateWithoutAuthorInput;
  connect?: EssayWhereUniqueInput[] | EssayWhereUniqueInput;
}

export interface EssayCreateWithoutAuthorInput {
  text: String;
  topic: EssayTopicCreateOneInput;
}

export interface SlotUpdateInput {
  capacity?: Int;
  registered?: UserUpdateManyWithoutSlotInput;
  registered_count?: Int;
  starts_at?: DateTimeInput;
  ends_at?: DateTimeInput;
}

export interface UserUpdateManyWithoutSlotInput {
  create?: UserCreateWithoutSlotInput[] | UserCreateWithoutSlotInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutSlotInput[]
    | UserUpdateWithWhereUniqueWithoutSlotInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutSlotInput[]
    | UserUpsertWithWhereUniqueWithoutSlotInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutSlotInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutSlotDataInput;
}

export interface UserUpdateWithoutSlotDataInput {
  upstream_id?: Int;
  first_name?: String;
  last_name?: String;
  email?: String;
  administrator?: Boolean;
  essays?: EssayUpdateManyWithoutAuthorInput;
}

export interface EssayUpdateManyWithoutAuthorInput {
  create?: EssayCreateWithoutAuthorInput[] | EssayCreateWithoutAuthorInput;
  delete?: EssayWhereUniqueInput[] | EssayWhereUniqueInput;
  connect?: EssayWhereUniqueInput[] | EssayWhereUniqueInput;
  set?: EssayWhereUniqueInput[] | EssayWhereUniqueInput;
  disconnect?: EssayWhereUniqueInput[] | EssayWhereUniqueInput;
  update?:
    | EssayUpdateWithWhereUniqueWithoutAuthorInput[]
    | EssayUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | EssayUpsertWithWhereUniqueWithoutAuthorInput[]
    | EssayUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: EssayScalarWhereInput[] | EssayScalarWhereInput;
  updateMany?:
    | EssayUpdateManyWithWhereNestedInput[]
    | EssayUpdateManyWithWhereNestedInput;
}

export interface EssayUpdateWithWhereUniqueWithoutAuthorInput {
  where: EssayWhereUniqueInput;
  data: EssayUpdateWithoutAuthorDataInput;
}

export interface EssayUpdateWithoutAuthorDataInput {
  text?: String;
  topic?: EssayTopicUpdateOneRequiredInput;
}

export interface EssayUpsertWithWhereUniqueWithoutAuthorInput {
  where: EssayWhereUniqueInput;
  update: EssayUpdateWithoutAuthorDataInput;
  create: EssayCreateWithoutAuthorInput;
}

export interface EssayScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  AND?: EssayScalarWhereInput[] | EssayScalarWhereInput;
  OR?: EssayScalarWhereInput[] | EssayScalarWhereInput;
  NOT?: EssayScalarWhereInput[] | EssayScalarWhereInput;
}

export interface EssayUpdateManyWithWhereNestedInput {
  where: EssayScalarWhereInput;
  data: EssayUpdateManyDataInput;
}

export interface EssayUpdateManyDataInput {
  text?: String;
}

export interface UserUpsertWithWhereUniqueWithoutSlotInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutSlotDataInput;
  create: UserCreateWithoutSlotInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  upstream_id?: Int;
  upstream_id_not?: Int;
  upstream_id_in?: Int[] | Int;
  upstream_id_not_in?: Int[] | Int;
  upstream_id_lt?: Int;
  upstream_id_lte?: Int;
  upstream_id_gt?: Int;
  upstream_id_gte?: Int;
  first_name?: String;
  first_name_not?: String;
  first_name_in?: String[] | String;
  first_name_not_in?: String[] | String;
  first_name_lt?: String;
  first_name_lte?: String;
  first_name_gt?: String;
  first_name_gte?: String;
  first_name_contains?: String;
  first_name_not_contains?: String;
  first_name_starts_with?: String;
  first_name_not_starts_with?: String;
  first_name_ends_with?: String;
  first_name_not_ends_with?: String;
  last_name?: String;
  last_name_not?: String;
  last_name_in?: String[] | String;
  last_name_not_in?: String[] | String;
  last_name_lt?: String;
  last_name_lte?: String;
  last_name_gt?: String;
  last_name_gte?: String;
  last_name_contains?: String;
  last_name_not_contains?: String;
  last_name_starts_with?: String;
  last_name_not_starts_with?: String;
  last_name_ends_with?: String;
  last_name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  administrator?: Boolean;
  administrator_not?: Boolean;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  upstream_id?: Int;
  first_name?: String;
  last_name?: String;
  email?: String;
  administrator?: Boolean;
}

export interface SlotUpdateManyMutationInput {
  capacity?: Int;
  registered_count?: Int;
  starts_at?: DateTimeInput;
  ends_at?: DateTimeInput;
}

export interface UserCreateInput {
  upstream_id: Int;
  first_name?: String;
  last_name?: String;
  email: String;
  administrator: Boolean;
  slot?: SlotCreateOneWithoutRegisteredInput;
  essays?: EssayCreateManyWithoutAuthorInput;
}

export interface UserUpdateInput {
  upstream_id?: Int;
  first_name?: String;
  last_name?: String;
  email?: String;
  administrator?: Boolean;
  slot?: SlotUpdateOneWithoutRegisteredInput;
  essays?: EssayUpdateManyWithoutAuthorInput;
}

export interface UserUpdateManyMutationInput {
  upstream_id?: Int;
  first_name?: String;
  last_name?: String;
  email?: String;
  administrator?: Boolean;
}

export interface EssaySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EssayWhereInput;
  AND?: EssaySubscriptionWhereInput[] | EssaySubscriptionWhereInput;
  OR?: EssaySubscriptionWhereInput[] | EssaySubscriptionWhereInput;
  NOT?: EssaySubscriptionWhereInput[] | EssaySubscriptionWhereInput;
}

export interface EssayTopicSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EssayTopicWhereInput;
  AND?: EssayTopicSubscriptionWhereInput[] | EssayTopicSubscriptionWhereInput;
  OR?: EssayTopicSubscriptionWhereInput[] | EssayTopicSubscriptionWhereInput;
  NOT?: EssayTopicSubscriptionWhereInput[] | EssayTopicSubscriptionWhereInput;
}

export interface SlotSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SlotWhereInput;
  AND?: SlotSubscriptionWhereInput[] | SlotSubscriptionWhereInput;
  OR?: SlotSubscriptionWhereInput[] | SlotSubscriptionWhereInput;
  NOT?: SlotSubscriptionWhereInput[] | SlotSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Essay {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  text: String;
}

export interface EssayPromise extends Promise<Essay>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  author: <T = UserPromise>() => T;
  topic: <T = EssayTopicPromise>() => T;
}

export interface EssaySubscription
  extends Promise<AsyncIterator<Essay>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
  topic: <T = EssayTopicSubscription>() => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  upstream_id: Int;
  first_name?: String;
  last_name?: String;
  email: String;
  administrator: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  upstream_id: () => Promise<Int>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  email: () => Promise<String>;
  administrator: () => Promise<Boolean>;
  slot: <T = SlotPromise>() => T;
  essays: <T = FragmentableArray<Essay>>(
    args?: {
      where?: EssayWhereInput;
      orderBy?: EssayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  upstream_id: () => Promise<AsyncIterator<Int>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  administrator: () => Promise<AsyncIterator<Boolean>>;
  slot: <T = SlotSubscription>() => T;
  essays: <T = Promise<AsyncIterator<EssaySubscription>>>(
    args?: {
      where?: EssayWhereInput;
      orderBy?: EssayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Slot {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  capacity: Int;
  registered_count: Int;
  starts_at: DateTimeOutput;
  ends_at: DateTimeOutput;
}

export interface SlotPromise extends Promise<Slot>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  capacity: () => Promise<Int>;
  registered: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  registered_count: () => Promise<Int>;
  starts_at: () => Promise<DateTimeOutput>;
  ends_at: () => Promise<DateTimeOutput>;
}

export interface SlotSubscription
  extends Promise<AsyncIterator<Slot>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  capacity: () => Promise<AsyncIterator<Int>>;
  registered: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  registered_count: () => Promise<AsyncIterator<Int>>;
  starts_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  ends_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EssayTopic {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  description: String;
  min_words: Int;
  max_words: Int;
}

export interface EssayTopicPromise extends Promise<EssayTopic>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  min_words: () => Promise<Int>;
  max_words: () => Promise<Int>;
}

export interface EssayTopicSubscription
  extends Promise<AsyncIterator<EssayTopic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  min_words: () => Promise<AsyncIterator<Int>>;
  max_words: () => Promise<AsyncIterator<Int>>;
}

export interface EssayConnection {
  pageInfo: PageInfo;
  edges: EssayEdge[];
}

export interface EssayConnectionPromise
  extends Promise<EssayConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EssayEdge>>() => T;
  aggregate: <T = AggregateEssayPromise>() => T;
}

export interface EssayConnectionSubscription
  extends Promise<AsyncIterator<EssayConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EssayEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEssaySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EssayEdge {
  node: Essay;
  cursor: String;
}

export interface EssayEdgePromise extends Promise<EssayEdge>, Fragmentable {
  node: <T = EssayPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EssayEdgeSubscription
  extends Promise<AsyncIterator<EssayEdge>>,
    Fragmentable {
  node: <T = EssaySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEssay {
  count: Int;
}

export interface AggregateEssayPromise
  extends Promise<AggregateEssay>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEssaySubscription
  extends Promise<AsyncIterator<AggregateEssay>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EssayTopicConnection {
  pageInfo: PageInfo;
  edges: EssayTopicEdge[];
}

export interface EssayTopicConnectionPromise
  extends Promise<EssayTopicConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EssayTopicEdge>>() => T;
  aggregate: <T = AggregateEssayTopicPromise>() => T;
}

export interface EssayTopicConnectionSubscription
  extends Promise<AsyncIterator<EssayTopicConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EssayTopicEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEssayTopicSubscription>() => T;
}

export interface EssayTopicEdge {
  node: EssayTopic;
  cursor: String;
}

export interface EssayTopicEdgePromise
  extends Promise<EssayTopicEdge>,
    Fragmentable {
  node: <T = EssayTopicPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EssayTopicEdgeSubscription
  extends Promise<AsyncIterator<EssayTopicEdge>>,
    Fragmentable {
  node: <T = EssayTopicSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEssayTopic {
  count: Int;
}

export interface AggregateEssayTopicPromise
  extends Promise<AggregateEssayTopic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEssayTopicSubscription
  extends Promise<AsyncIterator<AggregateEssayTopic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SlotConnection {
  pageInfo: PageInfo;
  edges: SlotEdge[];
}

export interface SlotConnectionPromise
  extends Promise<SlotConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SlotEdge>>() => T;
  aggregate: <T = AggregateSlotPromise>() => T;
}

export interface SlotConnectionSubscription
  extends Promise<AsyncIterator<SlotConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SlotEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSlotSubscription>() => T;
}

export interface SlotEdge {
  node: Slot;
  cursor: String;
}

export interface SlotEdgePromise extends Promise<SlotEdge>, Fragmentable {
  node: <T = SlotPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SlotEdgeSubscription
  extends Promise<AsyncIterator<SlotEdge>>,
    Fragmentable {
  node: <T = SlotSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSlot {
  count: Int;
}

export interface AggregateSlotPromise
  extends Promise<AggregateSlot>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSlotSubscription
  extends Promise<AsyncIterator<AggregateSlot>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EssaySubscriptionPayload {
  mutation: MutationType;
  node: Essay;
  updatedFields: String[];
  previousValues: EssayPreviousValues;
}

export interface EssaySubscriptionPayloadPromise
  extends Promise<EssaySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EssayPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EssayPreviousValuesPromise>() => T;
}

export interface EssaySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EssaySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EssaySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EssayPreviousValuesSubscription>() => T;
}

export interface EssayPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  text: String;
}

export interface EssayPreviousValuesPromise
  extends Promise<EssayPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
}

export interface EssayPreviousValuesSubscription
  extends Promise<AsyncIterator<EssayPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface EssayTopicSubscriptionPayload {
  mutation: MutationType;
  node: EssayTopic;
  updatedFields: String[];
  previousValues: EssayTopicPreviousValues;
}

export interface EssayTopicSubscriptionPayloadPromise
  extends Promise<EssayTopicSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EssayTopicPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EssayTopicPreviousValuesPromise>() => T;
}

export interface EssayTopicSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EssayTopicSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EssayTopicSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EssayTopicPreviousValuesSubscription>() => T;
}

export interface EssayTopicPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  title: String;
  description: String;
  min_words: Int;
  max_words: Int;
}

export interface EssayTopicPreviousValuesPromise
  extends Promise<EssayTopicPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  min_words: () => Promise<Int>;
  max_words: () => Promise<Int>;
}

export interface EssayTopicPreviousValuesSubscription
  extends Promise<AsyncIterator<EssayTopicPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  min_words: () => Promise<AsyncIterator<Int>>;
  max_words: () => Promise<AsyncIterator<Int>>;
}

export interface SlotSubscriptionPayload {
  mutation: MutationType;
  node: Slot;
  updatedFields: String[];
  previousValues: SlotPreviousValues;
}

export interface SlotSubscriptionPayloadPromise
  extends Promise<SlotSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SlotPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SlotPreviousValuesPromise>() => T;
}

export interface SlotSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SlotSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SlotSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SlotPreviousValuesSubscription>() => T;
}

export interface SlotPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  capacity: Int;
  registered_count: Int;
  starts_at: DateTimeOutput;
  ends_at: DateTimeOutput;
}

export interface SlotPreviousValuesPromise
  extends Promise<SlotPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  capacity: () => Promise<Int>;
  registered_count: () => Promise<Int>;
  starts_at: () => Promise<DateTimeOutput>;
  ends_at: () => Promise<DateTimeOutput>;
}

export interface SlotPreviousValuesSubscription
  extends Promise<AsyncIterator<SlotPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  capacity: () => Promise<AsyncIterator<Int>>;
  registered_count: () => Promise<AsyncIterator<Int>>;
  starts_at: () => Promise<AsyncIterator<DateTimeOutput>>;
  ends_at: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  upstream_id: Int;
  first_name?: String;
  last_name?: String;
  email: String;
  administrator: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  upstream_id: () => Promise<Int>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  email: () => Promise<String>;
  administrator: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  upstream_id: () => Promise<AsyncIterator<Int>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  administrator: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Slot",
    embedded: false
  },
  {
    name: "Essay",
    embedded: false
  },
  {
    name: "EssayTopic",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
