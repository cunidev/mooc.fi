// Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateEssay {
  count: Int!
}

type AggregateEssayTopic {
  count: Int!
}

type AggregateSlot {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Essay {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  author: User!
  topic: EssayTopic!
}

type EssayConnection {
  pageInfo: PageInfo!
  edges: [EssayEdge]!
  aggregate: AggregateEssay!
}

input EssayCreateInput {
  text: String!
  author: UserCreateOneWithoutEssaysInput!
  topic: EssayTopicCreateOneInput!
}

input EssayCreateManyWithoutAuthorInput {
  create: [EssayCreateWithoutAuthorInput!]
  connect: [EssayWhereUniqueInput!]
}

input EssayCreateWithoutAuthorInput {
  text: String!
  topic: EssayTopicCreateOneInput!
}

type EssayEdge {
  node: Essay!
  cursor: String!
}

enum EssayOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  text_ASC
  text_DESC
}

type EssayPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
}

input EssayScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  AND: [EssayScalarWhereInput!]
  OR: [EssayScalarWhereInput!]
  NOT: [EssayScalarWhereInput!]
}

type EssaySubscriptionPayload {
  mutation: MutationType!
  node: Essay
  updatedFields: [String!]
  previousValues: EssayPreviousValues
}

input EssaySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EssayWhereInput
  AND: [EssaySubscriptionWhereInput!]
  OR: [EssaySubscriptionWhereInput!]
  NOT: [EssaySubscriptionWhereInput!]
}

type EssayTopic {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  min_words: Int!
  max_words: Int!
}

type EssayTopicConnection {
  pageInfo: PageInfo!
  edges: [EssayTopicEdge]!
  aggregate: AggregateEssayTopic!
}

input EssayTopicCreateInput {
  title: String!
  description: String!
  min_words: Int!
  max_words: Int!
}

input EssayTopicCreateOneInput {
  create: EssayTopicCreateInput
  connect: EssayTopicWhereUniqueInput
}

type EssayTopicEdge {
  node: EssayTopic!
  cursor: String!
}

enum EssayTopicOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  min_words_ASC
  min_words_DESC
  max_words_ASC
  max_words_DESC
}

type EssayTopicPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  min_words: Int!
  max_words: Int!
}

type EssayTopicSubscriptionPayload {
  mutation: MutationType!
  node: EssayTopic
  updatedFields: [String!]
  previousValues: EssayTopicPreviousValues
}

input EssayTopicSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EssayTopicWhereInput
  AND: [EssayTopicSubscriptionWhereInput!]
  OR: [EssayTopicSubscriptionWhereInput!]
  NOT: [EssayTopicSubscriptionWhereInput!]
}

input EssayTopicUpdateDataInput {
  title: String
  description: String
  min_words: Int
  max_words: Int
}

input EssayTopicUpdateInput {
  title: String
  description: String
  min_words: Int
  max_words: Int
}

input EssayTopicUpdateManyMutationInput {
  title: String
  description: String
  min_words: Int
  max_words: Int
}

input EssayTopicUpdateOneRequiredInput {
  create: EssayTopicCreateInput
  update: EssayTopicUpdateDataInput
  upsert: EssayTopicUpsertNestedInput
  connect: EssayTopicWhereUniqueInput
}

input EssayTopicUpsertNestedInput {
  update: EssayTopicUpdateDataInput!
  create: EssayTopicCreateInput!
}

input EssayTopicWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  min_words: Int
  min_words_not: Int
  min_words_in: [Int!]
  min_words_not_in: [Int!]
  min_words_lt: Int
  min_words_lte: Int
  min_words_gt: Int
  min_words_gte: Int
  max_words: Int
  max_words_not: Int
  max_words_in: [Int!]
  max_words_not_in: [Int!]
  max_words_lt: Int
  max_words_lte: Int
  max_words_gt: Int
  max_words_gte: Int
  AND: [EssayTopicWhereInput!]
  OR: [EssayTopicWhereInput!]
  NOT: [EssayTopicWhereInput!]
}

input EssayTopicWhereUniqueInput {
  id: ID
}

input EssayUpdateInput {
  text: String
  author: UserUpdateOneRequiredWithoutEssaysInput
  topic: EssayTopicUpdateOneRequiredInput
}

input EssayUpdateManyDataInput {
  text: String
}

input EssayUpdateManyMutationInput {
  text: String
}

input EssayUpdateManyWithoutAuthorInput {
  create: [EssayCreateWithoutAuthorInput!]
  delete: [EssayWhereUniqueInput!]
  connect: [EssayWhereUniqueInput!]
  set: [EssayWhereUniqueInput!]
  disconnect: [EssayWhereUniqueInput!]
  update: [EssayUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [EssayUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [EssayScalarWhereInput!]
  updateMany: [EssayUpdateManyWithWhereNestedInput!]
}

input EssayUpdateManyWithWhereNestedInput {
  where: EssayScalarWhereInput!
  data: EssayUpdateManyDataInput!
}

input EssayUpdateWithoutAuthorDataInput {
  text: String
  topic: EssayTopicUpdateOneRequiredInput
}

input EssayUpdateWithWhereUniqueWithoutAuthorInput {
  where: EssayWhereUniqueInput!
  data: EssayUpdateWithoutAuthorDataInput!
}

input EssayUpsertWithWhereUniqueWithoutAuthorInput {
  where: EssayWhereUniqueInput!
  update: EssayUpdateWithoutAuthorDataInput!
  create: EssayCreateWithoutAuthorInput!
}

input EssayWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  author: UserWhereInput
  topic: EssayTopicWhereInput
  AND: [EssayWhereInput!]
  OR: [EssayWhereInput!]
  NOT: [EssayWhereInput!]
}

input EssayWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createEssay(data: EssayCreateInput!): Essay!
  updateEssay(data: EssayUpdateInput!, where: EssayWhereUniqueInput!): Essay
  updateManyEssays(data: EssayUpdateManyMutationInput!, where: EssayWhereInput): BatchPayload!
  upsertEssay(where: EssayWhereUniqueInput!, create: EssayCreateInput!, update: EssayUpdateInput!): Essay!
  deleteEssay(where: EssayWhereUniqueInput!): Essay
  deleteManyEssays(where: EssayWhereInput): BatchPayload!
  createEssayTopic(data: EssayTopicCreateInput!): EssayTopic!
  updateEssayTopic(data: EssayTopicUpdateInput!, where: EssayTopicWhereUniqueInput!): EssayTopic
  updateManyEssayTopics(data: EssayTopicUpdateManyMutationInput!, where: EssayTopicWhereInput): BatchPayload!
  upsertEssayTopic(where: EssayTopicWhereUniqueInput!, create: EssayTopicCreateInput!, update: EssayTopicUpdateInput!): EssayTopic!
  deleteEssayTopic(where: EssayTopicWhereUniqueInput!): EssayTopic
  deleteManyEssayTopics(where: EssayTopicWhereInput): BatchPayload!
  createSlot(data: SlotCreateInput!): Slot!
  updateSlot(data: SlotUpdateInput!, where: SlotWhereUniqueInput!): Slot
  updateManySlots(data: SlotUpdateManyMutationInput!, where: SlotWhereInput): BatchPayload!
  upsertSlot(where: SlotWhereUniqueInput!, create: SlotCreateInput!, update: SlotUpdateInput!): Slot!
  deleteSlot(where: SlotWhereUniqueInput!): Slot
  deleteManySlots(where: SlotWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  essay(where: EssayWhereUniqueInput!): Essay
  essays(where: EssayWhereInput, orderBy: EssayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Essay]!
  essaysConnection(where: EssayWhereInput, orderBy: EssayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EssayConnection!
  essayTopic(where: EssayTopicWhereUniqueInput!): EssayTopic
  essayTopics(where: EssayTopicWhereInput, orderBy: EssayTopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EssayTopic]!
  essayTopicsConnection(where: EssayTopicWhereInput, orderBy: EssayTopicOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EssayTopicConnection!
  slot(where: SlotWhereUniqueInput!): Slot
  slots(where: SlotWhereInput, orderBy: SlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Slot]!
  slotsConnection(where: SlotWhereInput, orderBy: SlotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SlotConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Slot {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  capacity: Int!
  registered(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  starts_at: DateTime!
  ends_at: DateTime!
}

type SlotConnection {
  pageInfo: PageInfo!
  edges: [SlotEdge]!
  aggregate: AggregateSlot!
}

input SlotCreateInput {
  capacity: Int!
  registered: UserCreateManyWithoutSlotInput
  starts_at: DateTime!
  ends_at: DateTime!
}

input SlotCreateOneWithoutRegisteredInput {
  create: SlotCreateWithoutRegisteredInput
  connect: SlotWhereUniqueInput
}

input SlotCreateWithoutRegisteredInput {
  capacity: Int!
  starts_at: DateTime!
  ends_at: DateTime!
}

type SlotEdge {
  node: Slot!
  cursor: String!
}

enum SlotOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  capacity_ASC
  capacity_DESC
  starts_at_ASC
  starts_at_DESC
  ends_at_ASC
  ends_at_DESC
}

type SlotPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  capacity: Int!
  starts_at: DateTime!
  ends_at: DateTime!
}

type SlotSubscriptionPayload {
  mutation: MutationType!
  node: Slot
  updatedFields: [String!]
  previousValues: SlotPreviousValues
}

input SlotSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SlotWhereInput
  AND: [SlotSubscriptionWhereInput!]
  OR: [SlotSubscriptionWhereInput!]
  NOT: [SlotSubscriptionWhereInput!]
}

input SlotUpdateInput {
  capacity: Int
  registered: UserUpdateManyWithoutSlotInput
  starts_at: DateTime
  ends_at: DateTime
}

input SlotUpdateManyMutationInput {
  capacity: Int
  starts_at: DateTime
  ends_at: DateTime
}

input SlotUpdateOneWithoutRegisteredInput {
  create: SlotCreateWithoutRegisteredInput
  update: SlotUpdateWithoutRegisteredDataInput
  upsert: SlotUpsertWithoutRegisteredInput
  delete: Boolean
  disconnect: Boolean
  connect: SlotWhereUniqueInput
}

input SlotUpdateWithoutRegisteredDataInput {
  capacity: Int
  starts_at: DateTime
  ends_at: DateTime
}

input SlotUpsertWithoutRegisteredInput {
  update: SlotUpdateWithoutRegisteredDataInput!
  create: SlotCreateWithoutRegisteredInput!
}

input SlotWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  capacity: Int
  capacity_not: Int
  capacity_in: [Int!]
  capacity_not_in: [Int!]
  capacity_lt: Int
  capacity_lte: Int
  capacity_gt: Int
  capacity_gte: Int
  registered_every: UserWhereInput
  registered_some: UserWhereInput
  registered_none: UserWhereInput
  starts_at: DateTime
  starts_at_not: DateTime
  starts_at_in: [DateTime!]
  starts_at_not_in: [DateTime!]
  starts_at_lt: DateTime
  starts_at_lte: DateTime
  starts_at_gt: DateTime
  starts_at_gte: DateTime
  ends_at: DateTime
  ends_at_not: DateTime
  ends_at_in: [DateTime!]
  ends_at_not_in: [DateTime!]
  ends_at_lt: DateTime
  ends_at_lte: DateTime
  ends_at_gt: DateTime
  ends_at_gte: DateTime
  AND: [SlotWhereInput!]
  OR: [SlotWhereInput!]
  NOT: [SlotWhereInput!]
}

input SlotWhereUniqueInput {
  id: ID
}

type Subscription {
  essay(where: EssaySubscriptionWhereInput): EssaySubscriptionPayload
  essayTopic(where: EssayTopicSubscriptionWhereInput): EssayTopicSubscriptionPayload
  slot(where: SlotSubscriptionWhereInput): SlotSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  upstream_id: Int!
  first_name: String
  last_name: String
  email: String!
  administrator: Boolean!
  slot: Slot
  essays(where: EssayWhereInput, orderBy: EssayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Essay!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  upstream_id: Int!
  first_name: String
  last_name: String
  email: String!
  administrator: Boolean!
  slot: SlotCreateOneWithoutRegisteredInput
  essays: EssayCreateManyWithoutAuthorInput
}

input UserCreateManyWithoutSlotInput {
  create: [UserCreateWithoutSlotInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutEssaysInput {
  create: UserCreateWithoutEssaysInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEssaysInput {
  upstream_id: Int!
  first_name: String
  last_name: String
  email: String!
  administrator: Boolean!
  slot: SlotCreateOneWithoutRegisteredInput
}

input UserCreateWithoutSlotInput {
  upstream_id: Int!
  first_name: String
  last_name: String
  email: String!
  administrator: Boolean!
  essays: EssayCreateManyWithoutAuthorInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  upstream_id_ASC
  upstream_id_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  email_ASC
  email_DESC
  administrator_ASC
  administrator_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  upstream_id: Int!
  first_name: String
  last_name: String
  email: String!
  administrator: Boolean!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  upstream_id: Int
  upstream_id_not: Int
  upstream_id_in: [Int!]
  upstream_id_not_in: [Int!]
  upstream_id_lt: Int
  upstream_id_lte: Int
  upstream_id_gt: Int
  upstream_id_gte: Int
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  administrator: Boolean
  administrator_not: Boolean
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  upstream_id: Int
  first_name: String
  last_name: String
  email: String
  administrator: Boolean
  slot: SlotUpdateOneWithoutRegisteredInput
  essays: EssayUpdateManyWithoutAuthorInput
}

input UserUpdateManyDataInput {
  upstream_id: Int
  first_name: String
  last_name: String
  email: String
  administrator: Boolean
}

input UserUpdateManyMutationInput {
  upstream_id: Int
  first_name: String
  last_name: String
  email: String
  administrator: Boolean
}

input UserUpdateManyWithoutSlotInput {
  create: [UserCreateWithoutSlotInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSlotInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSlotInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutEssaysInput {
  create: UserCreateWithoutEssaysInput
  update: UserUpdateWithoutEssaysDataInput
  upsert: UserUpsertWithoutEssaysInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutEssaysDataInput {
  upstream_id: Int
  first_name: String
  last_name: String
  email: String
  administrator: Boolean
  slot: SlotUpdateOneWithoutRegisteredInput
}

input UserUpdateWithoutSlotDataInput {
  upstream_id: Int
  first_name: String
  last_name: String
  email: String
  administrator: Boolean
  essays: EssayUpdateManyWithoutAuthorInput
}

input UserUpdateWithWhereUniqueWithoutSlotInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSlotDataInput!
}

input UserUpsertWithoutEssaysInput {
  update: UserUpdateWithoutEssaysDataInput!
  create: UserCreateWithoutEssaysInput!
}

input UserUpsertWithWhereUniqueWithoutSlotInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSlotDataInput!
  create: UserCreateWithoutSlotInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  upstream_id: Int
  upstream_id_not: Int
  upstream_id_in: [Int!]
  upstream_id_not_in: [Int!]
  upstream_id_lt: Int
  upstream_id_lte: Int
  upstream_id_gt: Int
  upstream_id_gte: Int
  first_name: String
  first_name_not: String
  first_name_in: [String!]
  first_name_not_in: [String!]
  first_name_lt: String
  first_name_lte: String
  first_name_gt: String
  first_name_gte: String
  first_name_contains: String
  first_name_not_contains: String
  first_name_starts_with: String
  first_name_not_starts_with: String
  first_name_ends_with: String
  first_name_not_ends_with: String
  last_name: String
  last_name_not: String
  last_name_in: [String!]
  last_name_not_in: [String!]
  last_name_lt: String
  last_name_lte: String
  last_name_gt: String
  last_name_gte: String
  last_name_contains: String
  last_name_not_contains: String
  last_name_starts_with: String
  last_name_not_starts_with: String
  last_name_ends_with: String
  last_name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  administrator: Boolean
  administrator_not: Boolean
  slot: SlotWhereInput
  essays_every: EssayWhereInput
  essays_some: EssayWhereInput
  essays_none: EssayWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  upstream_id: Int
}
`